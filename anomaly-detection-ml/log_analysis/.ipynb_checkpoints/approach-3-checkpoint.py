{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T20:52:45.342775Z",
     "iopub.status.busy": "2023-02-28T20:52:45.342389Z",
     "iopub.status.idle": "2023-02-28T20:52:45.351376Z",
     "shell.execute_reply": "2023-02-28T20:52:45.349894Z",
     "shell.execute_reply.started": "2023-02-28T20:52:45.342741Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\n\\nJava/HDFS logs\\n\\nt1 INFO added user abc\\nt2 ERROR deleted user xyz\\n\\nElastic search\\n\\nt1 | INFO | added user abc\\nt2 | ERROR | deleted user xyz\\n\\nML \\n\\nEvents\\n\\nevent_id | event\\ne1 | added user <>\\ne2 | deleted user <>\\n\\n\\nLogs\\n\\n0-5 mins - tw1\\nt1 | INFO | added user 1\\nt2 | ERROR | deleted user 2\\nt3 | INFO | added user 3\\nt4 | ERROR | deleted user 4\\nt5 | INFO | added user 5\\n\\n\\n6-10 mins\\nt6 | ERROR | deleted user 6\\nt7 | INFO | added user 7\\nt8 | ERROR | deleted user 8\\n\\n11-15 mins\\nt9 | INFO | added user 9\\nt10 | ERROR | deleted user 0\\n\\n\\nLog_summary\\n\\n\\ntime_window_id | count_info | count_error | count_e1 | count_e2\\ntw1 | 3 | 2 | 3 | 2\\ntw2 | 1 | 2 | 1 | 2\\ntw3 | 1 | 1 | 1 | 1\\n\\n'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\"\"\"\n",
    "\n",
    "Java/HDFS logs\n",
    "\n",
    "t1 INFO added user abc\n",
    "t2 ERROR deleted user xyz\n",
    "\n",
    "Elastic search\n",
    "\n",
    "t1 | INFO | added user abc\n",
    "t2 | ERROR | deleted user xyz\n",
    "\n",
    "ML \n",
    "\n",
    "Events\n",
    "\n",
    "event_id | event\n",
    "e1 | added user <>\n",
    "e2 | deleted user <>\n",
    "\n",
    "\n",
    "Logs\n",
    "\n",
    "0-5 mins - tw1\n",
    "t1 | INFO | added user 1\n",
    "t2 | ERROR | deleted user 2\n",
    "t3 | INFO | added user 3\n",
    "t4 | ERROR | deleted user 4\n",
    "t5 | INFO | added user 5\n",
    "\n",
    "\n",
    "6-10 mins\n",
    "t6 | ERROR | deleted user 6\n",
    "t7 | INFO | added user 7\n",
    "t8 | ERROR | deleted user 8\n",
    "\n",
    "11-15 mins\n",
    "t9 | INFO | added user 9\n",
    "t10 | ERROR | deleted user 0\n",
    "\n",
    "\n",
    "Log_summary\n",
    "\n",
    "\n",
    "time_window_id | count_info | count_error | count_e1 | count_e2\n",
    "tw1 | 3 | 2 | 3 | 2\n",
    "tw2 | 1 | 2 | 1 | 2\n",
    "tw3 | 1 | 1 | 1 | 1\n",
    "\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2023-04-19 21:32:21.970854 2023-04-20 21:32:21.970854\n"
     ]
    }
   ],
   "source": [
    "import datetime\n",
    "    \n",
    "end_time = datetime.datetime.utcnow()\n",
    "start_time = end_time - datetime.timedelta(days = 1)\n",
    "\n",
    "print(start_time, end_time)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Elasticsearch connection\n",
    "\n",
    "from elasticsearch import Elasticsearch\n",
    "\n",
    "AWS_HOSTNAME = 'http://ec2-13-57-247-5.us-west-1.compute.amazonaws.com'\n",
    "ELASTIC_PORT = 9200\n",
    "\n",
    "es = Elasticsearch([\"{}:{}\".format(AWS_HOSTNAME, ELASTIC_PORT)],timeout=30)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "\n",
    "def fetch_logs(start_time, end_time):\n",
    "\n",
    "    search_body = {\n",
    "        \"query\": {\n",
    "            \"range\": {\n",
    "                \"@timestamp\": {\n",
    "                    \"gte\": start_time,\n",
    "                    \"lte\": end_time\n",
    "                }\n",
    "            }\n",
    "        }\n",
    "    }\n",
    "    search_result = es.search(index='spring-elk-logs', body=search_body)\n",
    "    hits = search_result['hits']['hits']    \n",
    "    log_dir = \"data/unstructured/Java/\"\n",
    "    log_file_path = os.path.join(log_dir, f\"application.log\")\n",
    "    with open(log_file_path, 'a') as log_file:\n",
    "        for hit in hits:\n",
    "            log_file.write(f\"{hit['_source']['message']}\\n\")\n",
    "    return log_file_path\n",
    "\n",
    "log_file_path = fetch_logs(start_time, end_time)\n",
    "print(f\"Logs fetched from elasticsearch and file is generated  at {log_file_path}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "execution": {
     "iopub.execute_input": "2023-02-28T20:52:45.354560Z",
     "iopub.status.busy": "2023-02-28T20:52:45.354121Z",
     "iopub.status.idle": "2023-02-28T20:52:45.380464Z",
     "shell.execute_reply": "2023-02-28T20:52:45.378281Z",
     "shell.execute_reply.started": "2023-02-28T20:52:45.354514Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Parsing file: data/unstructured/Java/application_old.log\n",
      "Processed 8.0% of log lines.\n",
      "Processed 16.0% of log lines.\n",
      "Processed 24.0% of log lines.\n",
      "Processed 31.9% of log lines.\n",
      "Processed 39.9% of log lines.\n",
      "Processed 47.9% of log lines.\n",
      "Processed 55.9% of log lines.\n",
      "Processed 63.9% of log lines.\n",
      "Processed 71.9% of log lines.\n",
      "Processed 79.9% of log lines.\n",
      "Processed 87.9% of log lines.\n",
      "Processed 95.8% of log lines.\n",
      "Processed 100.0% of log lines.\n",
      "Parsing done. [Time taken: 0:00:00.906950]\n",
      "Loading data/structured/Java/application_old.log_structured.csv\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LineId</th>\n",
       "      <th>Date</th>\n",
       "      <th>Time</th>\n",
       "      <th>Pid</th>\n",
       "      <th>Level</th>\n",
       "      <th>Component</th>\n",
       "      <th>Content</th>\n",
       "      <th>EventId</th>\n",
       "      <th>EventTemplate</th>\n",
       "      <th>ParameterList</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>29-03-2023</td>\n",
       "      <td>09:11:24.916</td>\n",
       "      <td>[http-nio-8080-exec-1]</td>\n",
       "      <td>INFO</td>\n",
       "      <td>c.b.management.services.UserService.getAllCards</td>\n",
       "      <td>/home/ubuntu/Anomaly-Detection/Bank-Management...</td>\n",
       "      <td>d73f95b5</td>\n",
       "      <td>/home/ubuntu/Anomaly-Detection/Bank-Management...</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>29-03-2023</td>\n",
       "      <td>09:11:26.040</td>\n",
       "      <td>[http-nio-8080-exec-3]</td>\n",
       "      <td>INFO</td>\n",
       "      <td>c.b.management.services.UserService.createCard</td>\n",
       "      <td>Inside create card...</td>\n",
       "      <td>b23d1fae</td>\n",
       "      <td>Inside &lt;*&gt; card...</td>\n",
       "      <td>['create']</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>29-03-2023</td>\n",
       "      <td>09:11:27.145</td>\n",
       "      <td>[http-nio-8080-exec-5]</td>\n",
       "      <td>INFO</td>\n",
       "      <td>c.b.management.services.UserService.updateCard</td>\n",
       "      <td>Inside update card...</td>\n",
       "      <td>b23d1fae</td>\n",
       "      <td>Inside &lt;*&gt; card...</td>\n",
       "      <td>['update']</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>29-03-2023</td>\n",
       "      <td>09:11:27.146</td>\n",
       "      <td>[http-nio-8080-exec-5]</td>\n",
       "      <td>INFO</td>\n",
       "      <td>c.b.management.services.UserService.updateCard</td>\n",
       "      <td>Card object with ID 94 has been updated succes...</td>\n",
       "      <td>94ca10d1</td>\n",
       "      <td>Card object with ID &lt;*&gt; has been updated succe...</td>\n",
       "      <td>['94']</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>29-03-2023</td>\n",
       "      <td>09:11:28.219</td>\n",
       "      <td>[http-nio-8080-exec-7]</td>\n",
       "      <td>INFO</td>\n",
       "      <td>c.b.management.services.UserService.deleteCard</td>\n",
       "      <td>Inside delete card...</td>\n",
       "      <td>b23d1fae</td>\n",
       "      <td>Inside &lt;*&gt; card...</td>\n",
       "      <td>['delete']</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12516</th>\n",
       "      <td>12517</td>\n",
       "      <td>29-03-2023</td>\n",
       "      <td>18:15:15.278</td>\n",
       "      <td>[http-nio-8080-exec-10]</td>\n",
       "      <td>ERROR</td>\n",
       "      <td>c.b.management.services.UserService.generateError</td>\n",
       "      <td>Error:</td>\n",
       "      <td>3d9f514d</td>\n",
       "      <td>Error:</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12517</th>\n",
       "      <td>12518</td>\n",
       "      <td>29-03-2023</td>\n",
       "      <td>18:15:15.278</td>\n",
       "      <td>[http-nio-8080-exec-10]</td>\n",
       "      <td>ERROR</td>\n",
       "      <td>c.b.management.services.UserService.generateError</td>\n",
       "      <td>Error:</td>\n",
       "      <td>3d9f514d</td>\n",
       "      <td>Error:</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12518</th>\n",
       "      <td>12519</td>\n",
       "      <td>29-03-2023</td>\n",
       "      <td>18:15:15.278</td>\n",
       "      <td>[http-nio-8080-exec-10]</td>\n",
       "      <td>ERROR</td>\n",
       "      <td>c.b.management.services.UserService.generateError</td>\n",
       "      <td>Error:</td>\n",
       "      <td>3d9f514d</td>\n",
       "      <td>Error:</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12519</th>\n",
       "      <td>12520</td>\n",
       "      <td>29-03-2023</td>\n",
       "      <td>18:15:15.279</td>\n",
       "      <td>[http-nio-8080-exec-10]</td>\n",
       "      <td>ERROR</td>\n",
       "      <td>c.b.management.services.UserService.generateError</td>\n",
       "      <td>Error:</td>\n",
       "      <td>3d9f514d</td>\n",
       "      <td>Error:</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12520</th>\n",
       "      <td>12521</td>\n",
       "      <td>29-03-2023</td>\n",
       "      <td>18:15:18.382</td>\n",
       "      <td>[http-nio-8080-exec-1]</td>\n",
       "      <td>ERROR</td>\n",
       "      <td>c.b.management.services.UserService.generateError</td>\n",
       "      <td>Error:</td>\n",
       "      <td>3d9f514d</td>\n",
       "      <td>Error:</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>12521 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       LineId        Date          Time                      Pid  Level  \\\n",
       "0           1  29-03-2023  09:11:24.916   [http-nio-8080-exec-1]   INFO   \n",
       "1           2  29-03-2023  09:11:26.040   [http-nio-8080-exec-3]   INFO   \n",
       "2           3  29-03-2023  09:11:27.145   [http-nio-8080-exec-5]   INFO   \n",
       "3           4  29-03-2023  09:11:27.146   [http-nio-8080-exec-5]   INFO   \n",
       "4           5  29-03-2023  09:11:28.219   [http-nio-8080-exec-7]   INFO   \n",
       "...       ...         ...           ...                      ...    ...   \n",
       "12516   12517  29-03-2023  18:15:15.278  [http-nio-8080-exec-10]  ERROR   \n",
       "12517   12518  29-03-2023  18:15:15.278  [http-nio-8080-exec-10]  ERROR   \n",
       "12518   12519  29-03-2023  18:15:15.278  [http-nio-8080-exec-10]  ERROR   \n",
       "12519   12520  29-03-2023  18:15:15.279  [http-nio-8080-exec-10]  ERROR   \n",
       "12520   12521  29-03-2023  18:15:18.382   [http-nio-8080-exec-1]  ERROR   \n",
       "\n",
       "                                               Component  \\\n",
       "0        c.b.management.services.UserService.getAllCards   \n",
       "1         c.b.management.services.UserService.createCard   \n",
       "2         c.b.management.services.UserService.updateCard   \n",
       "3         c.b.management.services.UserService.updateCard   \n",
       "4         c.b.management.services.UserService.deleteCard   \n",
       "...                                                  ...   \n",
       "12516  c.b.management.services.UserService.generateError   \n",
       "12517  c.b.management.services.UserService.generateError   \n",
       "12518  c.b.management.services.UserService.generateError   \n",
       "12519  c.b.management.services.UserService.generateError   \n",
       "12520  c.b.management.services.UserService.generateError   \n",
       "\n",
       "                                                 Content   EventId  \\\n",
       "0      /home/ubuntu/Anomaly-Detection/Bank-Management...  d73f95b5   \n",
       "1                                  Inside create card...  b23d1fae   \n",
       "2                                  Inside update card...  b23d1fae   \n",
       "3      Card object with ID 94 has been updated succes...  94ca10d1   \n",
       "4                                  Inside delete card...  b23d1fae   \n",
       "...                                                  ...       ...   \n",
       "12516                                             Error:  3d9f514d   \n",
       "12517                                             Error:  3d9f514d   \n",
       "12518                                             Error:  3d9f514d   \n",
       "12519                                             Error:  3d9f514d   \n",
       "12520                                             Error:  3d9f514d   \n",
       "\n",
       "                                           EventTemplate ParameterList  \n",
       "0      /home/ubuntu/Anomaly-Detection/Bank-Management...            []  \n",
       "1                                     Inside <*> card...    ['create']  \n",
       "2                                     Inside <*> card...    ['update']  \n",
       "3      Card object with ID <*> has been updated succe...        ['94']  \n",
       "4                                     Inside <*> card...    ['delete']  \n",
       "...                                                  ...           ...  \n",
       "12516                                             Error:            []  \n",
       "12517                                             Error:            []  \n",
       "12518                                             Error:            []  \n",
       "12519                                             Error:            []  \n",
       "12520                                             Error:            []  \n",
       "\n",
       "[12521 rows x 10 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import os\n",
    "import numpy as np\n",
    "import re\n",
    "from sklearn.utils import shuffle\n",
    "from collections import OrderedDict\n",
    "import sys\n",
    "sys.path.append('../')\n",
    "from log_parser import Drain\n",
    "\n",
    "log_file_path = 'data/unstructured/Java/'\n",
    "#label_file_name = 'data/unstructured/HDFS/anomaly_label.csv'\n",
    "unstructured_log_filename = 'application.log'\n",
    "structured_log_file_path = 'data/structured/Java/'\n",
    "structured_log_filename = 'application.log_structured.csv'\n",
    "\n",
    "\n",
    "def parseLog(log_file_path, log_file_name, structured_log_file_path, log_type):\n",
    "    if log_type == 'HDFS':\n",
    "        log_format = '<Date> <Time> <Pid> <Level> <Component>: <Content>'\n",
    "        \n",
    "    if log_type == 'Java':\n",
    "        log_format = '<Date> <Time> <Pid> <Level> <Component> - <Content>'\n",
    "\n",
    "    # Regular expression list for optional preprocessing (default: [])\n",
    "    regex      = [\n",
    "        r'blk_(|-)[0-9]+' , # block id\n",
    "        r'(/|)([0-9]+\\.){3}[0-9]+(:[0-9]+|)(:|)', # IP\n",
    "        r'(?<=[^A-Za-z0-9])(\\-?\\+?\\d+)(?=[^A-Za-z0-9])|[0-9]+$', # Numbers\n",
    "    ]\n",
    "    st         = 0.5  # Similarity threshold\n",
    "    depth      = 4  # Depth of all leaf nodes\n",
    "\n",
    "    parser = Drain.LogParser(log_format, indir=log_file_path, outdir=structured_log_file_path,  depth=depth, st=st, rex=regex)\n",
    "    parser.parse(log_file_name)\n",
    "\n",
    "## parse the logs - convert unstructured to structured log\n",
    "parseLog(log_file_path, unstructured_log_filename, structured_log_file_path, 'Java')\n",
    "    \n",
    "\n",
    "## read structured log \n",
    "print(\"Loading\", structured_log_file_path+structured_log_filename)\n",
    "structured_log = pd.read_csv(structured_log_file_path+structured_log_filename, engine='c', na_filter=False, memory_map=True)\n",
    "\n",
    "structured_log"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LineId</th>\n",
       "      <th>Date</th>\n",
       "      <th>Time</th>\n",
       "      <th>Pid</th>\n",
       "      <th>Level</th>\n",
       "      <th>Component</th>\n",
       "      <th>Content</th>\n",
       "      <th>EventId</th>\n",
       "      <th>EventTemplate</th>\n",
       "      <th>ParameterList</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>29-03-2023</td>\n",
       "      <td>09:11:24.916</td>\n",
       "      <td>[http-nio-8080-exec-1]</td>\n",
       "      <td>INFO</td>\n",
       "      <td>c.b.management.services.UserService.getAllCards</td>\n",
       "      <td>/home/ubuntu/Anomaly-Detection/Bank-Management...</td>\n",
       "      <td>d73f95b5</td>\n",
       "      <td>/home/ubuntu/Anomaly-Detection/Bank-Management...</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>29-03-2023</td>\n",
       "      <td>09:11:26.040</td>\n",
       "      <td>[http-nio-8080-exec-3]</td>\n",
       "      <td>INFO</td>\n",
       "      <td>c.b.management.services.UserService.createCard</td>\n",
       "      <td>Inside create card...</td>\n",
       "      <td>b23d1fae</td>\n",
       "      <td>Inside &lt;*&gt; card...</td>\n",
       "      <td>['create']</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>29-03-2023</td>\n",
       "      <td>09:11:27.145</td>\n",
       "      <td>[http-nio-8080-exec-5]</td>\n",
       "      <td>INFO</td>\n",
       "      <td>c.b.management.services.UserService.updateCard</td>\n",
       "      <td>Inside update card...</td>\n",
       "      <td>b23d1fae</td>\n",
       "      <td>Inside &lt;*&gt; card...</td>\n",
       "      <td>['update']</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>29-03-2023</td>\n",
       "      <td>09:11:27.146</td>\n",
       "      <td>[http-nio-8080-exec-5]</td>\n",
       "      <td>INFO</td>\n",
       "      <td>c.b.management.services.UserService.updateCard</td>\n",
       "      <td>Card object with ID 94 has been updated succes...</td>\n",
       "      <td>94ca10d1</td>\n",
       "      <td>Card object with ID &lt;*&gt; has been updated succe...</td>\n",
       "      <td>['94']</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>29-03-2023</td>\n",
       "      <td>09:11:28.219</td>\n",
       "      <td>[http-nio-8080-exec-7]</td>\n",
       "      <td>INFO</td>\n",
       "      <td>c.b.management.services.UserService.deleteCard</td>\n",
       "      <td>Inside delete card...</td>\n",
       "      <td>b23d1fae</td>\n",
       "      <td>Inside &lt;*&gt; card...</td>\n",
       "      <td>['delete']</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   LineId        Date          Time                     Pid Level  \\\n",
       "0       1  29-03-2023  09:11:24.916  [http-nio-8080-exec-1]  INFO   \n",
       "1       2  29-03-2023  09:11:26.040  [http-nio-8080-exec-3]  INFO   \n",
       "2       3  29-03-2023  09:11:27.145  [http-nio-8080-exec-5]  INFO   \n",
       "3       4  29-03-2023  09:11:27.146  [http-nio-8080-exec-5]  INFO   \n",
       "4       5  29-03-2023  09:11:28.219  [http-nio-8080-exec-7]  INFO   \n",
       "\n",
       "                                         Component  \\\n",
       "0  c.b.management.services.UserService.getAllCards   \n",
       "1   c.b.management.services.UserService.createCard   \n",
       "2   c.b.management.services.UserService.updateCard   \n",
       "3   c.b.management.services.UserService.updateCard   \n",
       "4   c.b.management.services.UserService.deleteCard   \n",
       "\n",
       "                                             Content   EventId  \\\n",
       "0  /home/ubuntu/Anomaly-Detection/Bank-Management...  d73f95b5   \n",
       "1                              Inside create card...  b23d1fae   \n",
       "2                              Inside update card...  b23d1fae   \n",
       "3  Card object with ID 94 has been updated succes...  94ca10d1   \n",
       "4                              Inside delete card...  b23d1fae   \n",
       "\n",
       "                                       EventTemplate ParameterList  \n",
       "0  /home/ubuntu/Anomaly-Detection/Bank-Management...            []  \n",
       "1                                 Inside <*> card...    ['create']  \n",
       "2                                 Inside <*> card...    ['update']  \n",
       "3  Card object with ID <*> has been updated succe...        ['94']  \n",
       "4                                 Inside <*> card...    ['delete']  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Filter null dates\n",
    "\n",
    "structured_log = structured_log[structured_log['Date'] != '']\n",
    "structured_log.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-02-28T20:52:45.381949Z",
     "iopub.status.idle": "2023-02-28T20:52:45.382918Z",
     "shell.execute_reply": "2023-02-28T20:52:45.382628Z",
     "shell.execute_reply.started": "2023-02-28T20:52:45.382597Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>LineId</th>\n",
       "      <th>Date</th>\n",
       "      <th>Pid</th>\n",
       "      <th>Level</th>\n",
       "      <th>Component</th>\n",
       "      <th>Content</th>\n",
       "      <th>EventId</th>\n",
       "      <th>EventTemplate</th>\n",
       "      <th>ParameterList</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2023-03-29 09:11:24.916</td>\n",
       "      <td>[http-nio-8080-exec-1]</td>\n",
       "      <td>INFO</td>\n",
       "      <td>c.b.management.services.UserService.getAllCards</td>\n",
       "      <td>/home/ubuntu/Anomaly-Detection/Bank-Management...</td>\n",
       "      <td>d73f95b5</td>\n",
       "      <td>/home/ubuntu/Anomaly-Detection/Bank-Management...</td>\n",
       "      <td>[]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2023-03-29 09:11:26.040</td>\n",
       "      <td>[http-nio-8080-exec-3]</td>\n",
       "      <td>INFO</td>\n",
       "      <td>c.b.management.services.UserService.createCard</td>\n",
       "      <td>Inside create card...</td>\n",
       "      <td>b23d1fae</td>\n",
       "      <td>Inside &lt;*&gt; card...</td>\n",
       "      <td>['create']</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>2023-03-29 09:11:27.145</td>\n",
       "      <td>[http-nio-8080-exec-5]</td>\n",
       "      <td>INFO</td>\n",
       "      <td>c.b.management.services.UserService.updateCard</td>\n",
       "      <td>Inside update card...</td>\n",
       "      <td>b23d1fae</td>\n",
       "      <td>Inside &lt;*&gt; card...</td>\n",
       "      <td>['update']</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>2023-03-29 09:11:27.146</td>\n",
       "      <td>[http-nio-8080-exec-5]</td>\n",
       "      <td>INFO</td>\n",
       "      <td>c.b.management.services.UserService.updateCard</td>\n",
       "      <td>Card object with ID 94 has been updated succes...</td>\n",
       "      <td>94ca10d1</td>\n",
       "      <td>Card object with ID &lt;*&gt; has been updated succe...</td>\n",
       "      <td>['94']</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>2023-03-29 09:11:28.219</td>\n",
       "      <td>[http-nio-8080-exec-7]</td>\n",
       "      <td>INFO</td>\n",
       "      <td>c.b.management.services.UserService.deleteCard</td>\n",
       "      <td>Inside delete card...</td>\n",
       "      <td>b23d1fae</td>\n",
       "      <td>Inside &lt;*&gt; card...</td>\n",
       "      <td>['delete']</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   LineId                    Date                     Pid Level  \\\n",
       "0       1 2023-03-29 09:11:24.916  [http-nio-8080-exec-1]  INFO   \n",
       "1       2 2023-03-29 09:11:26.040  [http-nio-8080-exec-3]  INFO   \n",
       "2       3 2023-03-29 09:11:27.145  [http-nio-8080-exec-5]  INFO   \n",
       "3       4 2023-03-29 09:11:27.146  [http-nio-8080-exec-5]  INFO   \n",
       "4       5 2023-03-29 09:11:28.219  [http-nio-8080-exec-7]  INFO   \n",
       "\n",
       "                                         Component  \\\n",
       "0  c.b.management.services.UserService.getAllCards   \n",
       "1   c.b.management.services.UserService.createCard   \n",
       "2   c.b.management.services.UserService.updateCard   \n",
       "3   c.b.management.services.UserService.updateCard   \n",
       "4   c.b.management.services.UserService.deleteCard   \n",
       "\n",
       "                                             Content   EventId  \\\n",
       "0  /home/ubuntu/Anomaly-Detection/Bank-Management...  d73f95b5   \n",
       "1                              Inside create card...  b23d1fae   \n",
       "2                              Inside update card...  b23d1fae   \n",
       "3  Card object with ID 94 has been updated succes...  94ca10d1   \n",
       "4                              Inside delete card...  b23d1fae   \n",
       "\n",
       "                                       EventTemplate ParameterList  \n",
       "0  /home/ubuntu/Anomaly-Detection/Bank-Management...            []  \n",
       "1                                 Inside <*> card...    ['create']  \n",
       "2                                 Inside <*> card...    ['update']  \n",
       "3  Card object with ID <*> has been updated succe...        ['94']  \n",
       "4                                 Inside <*> card...    ['delete']  "
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def fill_zeros(x):\n",
    "    if len(str(x)) < 6:\n",
    "        return str(x).zfill(6)\n",
    "    else:\n",
    "        return str(x)\n",
    "    \n",
    "structured_log['Date'] = structured_log['Date'].apply(fill_zeros)\n",
    "structured_log['Time'] = structured_log['Time'].apply(fill_zeros)\n",
    "\n",
    "structured_log.loc[:,'Date'] = pd.to_datetime(structured_log.Date.astype(str)+' '+structured_log.Time.astype(str), format=\"%d-%m-%Y %H:%M:%S.%f\")\n",
    "# structured_log.set_index(\"Date\", inplace=True)\n",
    "\n",
    "structured_log = structured_log.drop(columns=['Time'])\n",
    "\n",
    "structured_log.head()\n",
    "\n",
    "# structured_log['EventTemplate'].nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-02-28T20:52:45.384456Z",
     "iopub.status.idle": "2023-02-28T20:52:45.385636Z",
     "shell.execute_reply": "2023-02-28T20:52:45.385400Z",
     "shell.execute_reply.started": "2023-02-28T20:52:45.385371Z"
    }
   },
   "outputs": [],
   "source": [
    "# TODO: Cleaning: Remove rows and colums with count 0 (no data present)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-02-28T20:52:45.387758Z",
     "iopub.status.idle": "2023-02-28T20:52:45.388406Z",
     "shell.execute_reply": "2023-02-28T20:52:45.388142Z",
     "shell.execute_reply.started": "2023-02-28T20:52:45.388109Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>total_msgs</th>\n",
       "      <th>WARN_count</th>\n",
       "      <th>INFO_count</th>\n",
       "      <th>DEBUG_count</th>\n",
       "      <th>TRACE_count</th>\n",
       "      <th>ERROR_count</th>\n",
       "      <th>FATAL_count</th>\n",
       "      <th>d73f95b5_count</th>\n",
       "      <th>b23d1fae_count</th>\n",
       "      <th>94ca10d1_count</th>\n",
       "      <th>f6b586ef_count</th>\n",
       "      <th>c0731fc8_count</th>\n",
       "      <th>81f0209d_count</th>\n",
       "      <th>e9469db0_count</th>\n",
       "      <th>54637d32_count</th>\n",
       "      <th>80abedaf_count</th>\n",
       "      <th>3d9f514d_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2023-03-29 09:15:00</td>\n",
       "      <td>354</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2023-03-29 09:20:00</td>\n",
       "      <td>507</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2023-03-29 09:25:00</td>\n",
       "      <td>496</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023-03-29 09:30:00</td>\n",
       "      <td>492</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2023-03-29 09:35:00</td>\n",
       "      <td>506</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Date  total_msgs  WARN_count  INFO_count  DEBUG_count  \\\n",
       "0 2023-03-29 09:15:00         354           0           0            0   \n",
       "1 2023-03-29 09:20:00         507           0           0            0   \n",
       "2 2023-03-29 09:25:00         496           0           0            0   \n",
       "3 2023-03-29 09:30:00         492           0           0            0   \n",
       "4 2023-03-29 09:35:00         506           0           0            0   \n",
       "\n",
       "   TRACE_count  ERROR_count  FATAL_count  d73f95b5_count  b23d1fae_count  \\\n",
       "0            0            0            0               0               0   \n",
       "1            0            0            0               0               0   \n",
       "2            0            0            0               0               0   \n",
       "3            0            0            0               0               0   \n",
       "4            0            0            0               0               0   \n",
       "\n",
       "   94ca10d1_count  f6b586ef_count  c0731fc8_count  81f0209d_count  \\\n",
       "0               0               0               0               0   \n",
       "1               0               0               0               0   \n",
       "2               0               0               0               0   \n",
       "3               0               0               0               0   \n",
       "4               0               0               0               0   \n",
       "\n",
       "   e9469db0_count  54637d32_count  80abedaf_count  3d9f514d_count  \n",
       "0               0               0               0               0  \n",
       "1               0               0               0               0  \n",
       "2               0               0               0               0  \n",
       "3               0               0               0               0  \n",
       "4               0               0               0               0  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Adding relevant columns to the dataframe\n",
    "LOG_LEVELS = ['WARN', 'INFO', 'DEBUG', 'TRACE', 'ERROR', 'FATAL']\n",
    "df_grouped = structured_log.groupby(pd.Grouper(key='Date', freq='5Min',closed='right',label='right')).agg(\n",
    "    total_msgs=pd.NamedAgg(column=\"Content\", aggfunc=\"count\"),    \n",
    ").reset_index()\n",
    "\n",
    "for level in LOG_LEVELS:\n",
    "    df_grouped[level + '_count'] = 0\n",
    "\n",
    "for event_id in structured_log['EventId'].unique():\n",
    "    df_grouped[event_id + '_count'] = 0\n",
    "\n",
    "df_grouped.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-02-28T20:52:45.390342Z",
     "iopub.status.idle": "2023-02-28T20:52:45.390933Z",
     "shell.execute_reply": "2023-02-28T20:52:45.390712Z",
     "shell.execute_reply.started": "2023-02-28T20:52:45.390686Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>total_msgs</th>\n",
       "      <th>WARN_count</th>\n",
       "      <th>INFO_count</th>\n",
       "      <th>DEBUG_count</th>\n",
       "      <th>TRACE_count</th>\n",
       "      <th>ERROR_count</th>\n",
       "      <th>FATAL_count</th>\n",
       "      <th>d73f95b5_count</th>\n",
       "      <th>b23d1fae_count</th>\n",
       "      <th>94ca10d1_count</th>\n",
       "      <th>f6b586ef_count</th>\n",
       "      <th>c0731fc8_count</th>\n",
       "      <th>81f0209d_count</th>\n",
       "      <th>e9469db0_count</th>\n",
       "      <th>54637d32_count</th>\n",
       "      <th>80abedaf_count</th>\n",
       "      <th>3d9f514d_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2023-03-29 09:15:00</td>\n",
       "      <td>354</td>\n",
       "      <td>0</td>\n",
       "      <td>354</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2023-03-29 09:20:00</td>\n",
       "      <td>507</td>\n",
       "      <td>0</td>\n",
       "      <td>507</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2023-03-29 09:25:00</td>\n",
       "      <td>496</td>\n",
       "      <td>0</td>\n",
       "      <td>496</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023-03-29 09:30:00</td>\n",
       "      <td>492</td>\n",
       "      <td>0</td>\n",
       "      <td>492</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2023-03-29 09:35:00</td>\n",
       "      <td>506</td>\n",
       "      <td>0</td>\n",
       "      <td>506</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 Date  total_msgs  WARN_count  INFO_count  DEBUG_count  \\\n",
       "0 2023-03-29 09:15:00         354           0         354            0   \n",
       "1 2023-03-29 09:20:00         507           0         507            0   \n",
       "2 2023-03-29 09:25:00         496           0         496            0   \n",
       "3 2023-03-29 09:30:00         492           0         492            0   \n",
       "4 2023-03-29 09:35:00         506           0         506            0   \n",
       "\n",
       "   TRACE_count  ERROR_count  FATAL_count  d73f95b5_count  b23d1fae_count  \\\n",
       "0            0            0            0               0               0   \n",
       "1            0            0            0               0               0   \n",
       "2            0            0            0               0               0   \n",
       "3            0            0            0               0               0   \n",
       "4            0            0            0               0               0   \n",
       "\n",
       "   94ca10d1_count  f6b586ef_count  c0731fc8_count  81f0209d_count  \\\n",
       "0               0               0               0               0   \n",
       "1               0               0               0               0   \n",
       "2               0               0               0               0   \n",
       "3               0               0               0               0   \n",
       "4               0               0               0               0   \n",
       "\n",
       "   e9469db0_count  54637d32_count  80abedaf_count  3d9f514d_count  \n",
       "0               0               0               0               0  \n",
       "1               0               0               0               0  \n",
       "2               0               0               0               0  \n",
       "3               0               0               0               0  \n",
       "4               0               0               0               0  "
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Populating all the log level counts\n",
    "df_grouped_logLevel = structured_log.groupby([pd.Grouper(key='Date', freq='5Min',closed='right',label='right'), 'Level']).agg(\n",
    "    count=pd.NamedAgg(column=\"Level\", aggfunc=\"count\"),    \n",
    ").reset_index()\n",
    "\n",
    "for row in df_grouped_logLevel.itertuples():\n",
    "    df_grouped.loc[df_grouped['Date'] == row.Date, row.Level + '_count'] = row.count\n",
    "\n",
    "df_grouped.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "execution": {
     "iopub.status.busy": "2023-02-28T20:52:45.392384Z",
     "iopub.status.idle": "2023-02-28T20:52:45.392828Z",
     "shell.execute_reply": "2023-02-28T20:52:45.392631Z",
     "shell.execute_reply.started": "2023-02-28T20:52:45.392604Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>total_msgs</th>\n",
       "      <th>WARN_count</th>\n",
       "      <th>INFO_count</th>\n",
       "      <th>DEBUG_count</th>\n",
       "      <th>TRACE_count</th>\n",
       "      <th>ERROR_count</th>\n",
       "      <th>FATAL_count</th>\n",
       "      <th>d73f95b5_count</th>\n",
       "      <th>b23d1fae_count</th>\n",
       "      <th>94ca10d1_count</th>\n",
       "      <th>f6b586ef_count</th>\n",
       "      <th>c0731fc8_count</th>\n",
       "      <th>81f0209d_count</th>\n",
       "      <th>e9469db0_count</th>\n",
       "      <th>54637d32_count</th>\n",
       "      <th>80abedaf_count</th>\n",
       "      <th>3d9f514d_count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2023-03-29 09:15:00</td>\n",
       "      <td>354</td>\n",
       "      <td>0</td>\n",
       "      <td>354</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>41</td>\n",
       "      <td>118</td>\n",
       "      <td>38</td>\n",
       "      <td>35</td>\n",
       "      <td>40</td>\n",
       "      <td>41</td>\n",
       "      <td>28</td>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2023-03-29 09:20:00</td>\n",
       "      <td>507</td>\n",
       "      <td>0</td>\n",
       "      <td>507</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>56</td>\n",
       "      <td>152</td>\n",
       "      <td>39</td>\n",
       "      <td>62</td>\n",
       "      <td>56</td>\n",
       "      <td>71</td>\n",
       "      <td>54</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2023-03-29 09:25:00</td>\n",
       "      <td>496</td>\n",
       "      <td>0</td>\n",
       "      <td>496</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>51</td>\n",
       "      <td>166</td>\n",
       "      <td>64</td>\n",
       "      <td>44</td>\n",
       "      <td>51</td>\n",
       "      <td>60</td>\n",
       "      <td>46</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023-03-29 09:30:00</td>\n",
       "      <td>492</td>\n",
       "      <td>0</td>\n",
       "      <td>492</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>62</td>\n",
       "      <td>170</td>\n",
       "      <td>57</td>\n",
       "      <td>49</td>\n",
       "      <td>62</td>\n",
       "      <td>46</td>\n",
       "      <td>38</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2023-03-29 09:35:00</td>\n",
       "      <td>506</td>\n",
       "      <td>0</td>\n",
       "      <td>506</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>163</td>\n",
       "      <td>54</td>\n",
       "      <td>61</td>\n",
       "      <td>45</td>\n",
       "      <td>69</td>\n",
       "      <td>53</td>\n",
       "      <td>16</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105</th>\n",
       "      <td>2023-03-29 18:00:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>2023-03-29 18:05:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>2023-03-29 18:10:00</td>\n",
       "      <td>283</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>283</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108</th>\n",
       "      <td>2023-03-29 18:15:00</td>\n",
       "      <td>289</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>289</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>2023-03-29 18:20:00</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>110 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Date  total_msgs  WARN_count  INFO_count  DEBUG_count  \\\n",
       "0   2023-03-29 09:15:00         354           0         354            0   \n",
       "1   2023-03-29 09:20:00         507           0         507            0   \n",
       "2   2023-03-29 09:25:00         496           0         496            0   \n",
       "3   2023-03-29 09:30:00         492           0         492            0   \n",
       "4   2023-03-29 09:35:00         506           0         506            0   \n",
       "..                  ...         ...         ...         ...          ...   \n",
       "105 2023-03-29 18:00:00           0           0           0            0   \n",
       "106 2023-03-29 18:05:00           0           0           0            0   \n",
       "107 2023-03-29 18:10:00         283           0           0            0   \n",
       "108 2023-03-29 18:15:00         289           0           0            0   \n",
       "109 2023-03-29 18:20:00          17           0           0            0   \n",
       "\n",
       "     TRACE_count  ERROR_count  FATAL_count  d73f95b5_count  b23d1fae_count  \\\n",
       "0              0            0            0              41             118   \n",
       "1              0            0            0              56             152   \n",
       "2              0            0            0              51             166   \n",
       "3              0            0            0              62             170   \n",
       "4              0            0            0              45             163   \n",
       "..           ...          ...          ...             ...             ...   \n",
       "105            0            0            0               0               0   \n",
       "106            0            0            0               0               0   \n",
       "107            0          283            0               0               0   \n",
       "108            0          289            0               0               0   \n",
       "109            0           17            0               0               0   \n",
       "\n",
       "     94ca10d1_count  f6b586ef_count  c0731fc8_count  81f0209d_count  \\\n",
       "0                38              35              40              41   \n",
       "1                39              62              56              71   \n",
       "2                64              44              51              60   \n",
       "3                57              49              62              46   \n",
       "4                54              61              45              69   \n",
       "..              ...             ...             ...             ...   \n",
       "105               0               0               0               0   \n",
       "106               0               0               0               0   \n",
       "107               0               0               0               0   \n",
       "108               0               0               0               0   \n",
       "109               0               0               0               0   \n",
       "\n",
       "     e9469db0_count  54637d32_count  80abedaf_count  3d9f514d_count  \n",
       "0                28              13               0               0  \n",
       "1                54              17               0               0  \n",
       "2                46              14               0               0  \n",
       "3                38               8               0               0  \n",
       "4                53              16               0               0  \n",
       "..              ...             ...             ...             ...  \n",
       "105               0               0               0               0  \n",
       "106               0               0               0               0  \n",
       "107               0               0               0             283  \n",
       "108               0               0               0             289  \n",
       "109               0               0               0              17  \n",
       "\n",
       "[110 rows x 18 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Populating all the event id counts\n",
    "df_grouped_eventId = structured_log.groupby([pd.Grouper(key='Date', freq='5Min',closed='right',label='right'), 'EventId']).agg(\n",
    "    count=pd.NamedAgg(column=\"EventId\", aggfunc=\"count\"),    \n",
    ").reset_index()\n",
    "\n",
    "for row in df_grouped_eventId.itertuples():\n",
    "    df_grouped.loc[df_grouped['Date'] == row.Date, row.EventId + '_count'] = row.count\n",
    "\n",
    "df_grouped"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Manually labelling anomalous window to compare later with model output\n",
    "\n",
    "df_grouped['anomaly_manual'] = (df_grouped['ERROR_count'] > 0).astype(int)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Filtering only the feature columns\n",
    "\n",
    "feature_cols = list(df_grouped.columns);\n",
    "feature_cols.remove('Date')\n",
    "\n",
    "data_with_feature_columns = df_grouped[feature_cols]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>total_msgs</th>\n",
       "      <th>WARN_count</th>\n",
       "      <th>INFO_count</th>\n",
       "      <th>DEBUG_count</th>\n",
       "      <th>TRACE_count</th>\n",
       "      <th>ERROR_count</th>\n",
       "      <th>FATAL_count</th>\n",
       "      <th>d73f95b5_count</th>\n",
       "      <th>b23d1fae_count</th>\n",
       "      <th>94ca10d1_count</th>\n",
       "      <th>f6b586ef_count</th>\n",
       "      <th>c0731fc8_count</th>\n",
       "      <th>81f0209d_count</th>\n",
       "      <th>e9469db0_count</th>\n",
       "      <th>54637d32_count</th>\n",
       "      <th>80abedaf_count</th>\n",
       "      <th>3d9f514d_count</th>\n",
       "      <th>anomaly_manual</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0.695481</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.695481</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.640625</td>\n",
       "      <td>0.634409</td>\n",
       "      <td>0.584615</td>\n",
       "      <td>0.538462</td>\n",
       "      <td>0.625000</td>\n",
       "      <td>0.577465</td>\n",
       "      <td>0.437500</td>\n",
       "      <td>0.764706</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0.996071</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.996071</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.875000</td>\n",
       "      <td>0.817204</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>0.953846</td>\n",
       "      <td>0.875000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.843750</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.974460</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.974460</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.796875</td>\n",
       "      <td>0.892473</td>\n",
       "      <td>0.984615</td>\n",
       "      <td>0.676923</td>\n",
       "      <td>0.796875</td>\n",
       "      <td>0.845070</td>\n",
       "      <td>0.718750</td>\n",
       "      <td>0.823529</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.966601</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.966601</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.968750</td>\n",
       "      <td>0.913978</td>\n",
       "      <td>0.876923</td>\n",
       "      <td>0.753846</td>\n",
       "      <td>0.968750</td>\n",
       "      <td>0.647887</td>\n",
       "      <td>0.593750</td>\n",
       "      <td>0.470588</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.994106</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.994106</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.703125</td>\n",
       "      <td>0.876344</td>\n",
       "      <td>0.830769</td>\n",
       "      <td>0.938462</td>\n",
       "      <td>0.703125</td>\n",
       "      <td>0.971831</td>\n",
       "      <td>0.828125</td>\n",
       "      <td>0.941176</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>106</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>0.555992</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.979239</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.979239</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108</th>\n",
       "      <td>0.567780</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>0.033399</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.058824</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.058824</td>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>110 rows × 18 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     total_msgs  WARN_count  INFO_count  DEBUG_count  TRACE_count  \\\n",
       "0      0.695481         0.0    0.695481          0.0          0.0   \n",
       "1      0.996071         0.0    0.996071          0.0          0.0   \n",
       "2      0.974460         0.0    0.974460          0.0          0.0   \n",
       "3      0.966601         0.0    0.966601          0.0          0.0   \n",
       "4      0.994106         0.0    0.994106          0.0          0.0   \n",
       "..          ...         ...         ...          ...          ...   \n",
       "105    0.000000         0.0    0.000000          0.0          0.0   \n",
       "106    0.000000         0.0    0.000000          0.0          0.0   \n",
       "107    0.555992         0.0    0.000000          0.0          0.0   \n",
       "108    0.567780         0.0    0.000000          0.0          0.0   \n",
       "109    0.033399         0.0    0.000000          0.0          0.0   \n",
       "\n",
       "     ERROR_count  FATAL_count  d73f95b5_count  b23d1fae_count  94ca10d1_count  \\\n",
       "0       0.000000          0.0        0.640625        0.634409        0.584615   \n",
       "1       0.000000          0.0        0.875000        0.817204        0.600000   \n",
       "2       0.000000          0.0        0.796875        0.892473        0.984615   \n",
       "3       0.000000          0.0        0.968750        0.913978        0.876923   \n",
       "4       0.000000          0.0        0.703125        0.876344        0.830769   \n",
       "..           ...          ...             ...             ...             ...   \n",
       "105     0.000000          0.0        0.000000        0.000000        0.000000   \n",
       "106     0.000000          0.0        0.000000        0.000000        0.000000   \n",
       "107     0.979239          0.0        0.000000        0.000000        0.000000   \n",
       "108     1.000000          0.0        0.000000        0.000000        0.000000   \n",
       "109     0.058824          0.0        0.000000        0.000000        0.000000   \n",
       "\n",
       "     f6b586ef_count  c0731fc8_count  81f0209d_count  e9469db0_count  \\\n",
       "0          0.538462        0.625000        0.577465        0.437500   \n",
       "1          0.953846        0.875000        1.000000        0.843750   \n",
       "2          0.676923        0.796875        0.845070        0.718750   \n",
       "3          0.753846        0.968750        0.647887        0.593750   \n",
       "4          0.938462        0.703125        0.971831        0.828125   \n",
       "..              ...             ...             ...             ...   \n",
       "105        0.000000        0.000000        0.000000        0.000000   \n",
       "106        0.000000        0.000000        0.000000        0.000000   \n",
       "107        0.000000        0.000000        0.000000        0.000000   \n",
       "108        0.000000        0.000000        0.000000        0.000000   \n",
       "109        0.000000        0.000000        0.000000        0.000000   \n",
       "\n",
       "     54637d32_count  80abedaf_count  3d9f514d_count  anomaly_manual  \n",
       "0          0.764706             0.0        0.000000             0.0  \n",
       "1          1.000000             0.0        0.000000             0.0  \n",
       "2          0.823529             0.0        0.000000             0.0  \n",
       "3          0.470588             0.0        0.000000             0.0  \n",
       "4          0.941176             0.0        0.000000             0.0  \n",
       "..              ...             ...             ...             ...  \n",
       "105        0.000000             0.0        0.000000             0.0  \n",
       "106        0.000000             0.0        0.000000             0.0  \n",
       "107        0.000000             0.0        0.979239             1.0  \n",
       "108        0.000000             0.0        1.000000             1.0  \n",
       "109        0.000000             0.0        0.058824             1.0  \n",
       "\n",
       "[110 rows x 18 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Scaling the values of the input data\n",
    "\n",
    "from sklearn import preprocessing\n",
    "\n",
    "min_max_scaler = preprocessing.MinMaxScaler()\n",
    "\n",
    "data_scaled = min_max_scaler.fit_transform(data_with_feature_columns)\n",
    "data_scaled = pd.DataFrame(data_scaled, columns=feature_cols)\n",
    "\n",
    "data_scaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.PairGrid at 0x7faec9309fa0>"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1800 with 60 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualizing the relationship between log_levels and the event_ids\n",
    "\n",
    "import seaborn as sns\n",
    "\n",
    "all_columns = list(df_grouped.columns)\n",
    "log_level_columns = all_columns[2:8]\n",
    "event_id_columns = all_columns[8:-1]\n",
    "\n",
    "sns.pairplot(df_grouped, y_vars= event_id_columns,\n",
    "                  x_vars= log_level_columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Applying Kmeans clustering to different values of k (1-15)\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.cluster import KMeans\n",
    "RANDOM_STATE = 123\n",
    "\n",
    "cluster_check_range = range(1, 15)\n",
    "\n",
    "kmeans = [None] * (len(cluster_check_range) + 1)\n",
    "scores = [0] * (len(cluster_check_range) + 1)\n",
    "for i in cluster_check_range:\n",
    "    if i == 0:\n",
    "        continue\n",
    "    kmeans[i] = KMeans(n_clusters=i, random_state=RANDOM_STATE).fit(data_scaled) \n",
    "    scores[i] = kmeans[i].score(data_scaled)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Finding the elbow point\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.plot(cluster_check_range, scores[1:])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Cluster number</th>\n",
       "      <th>counts</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>86</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Cluster number  counts\n",
       "0               0      86\n",
       "1               1      24"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Selecting appropriate k. Here we chose k = 8\n",
    "\n",
    "k = 2\n",
    "cluster_model = kmeans[k]\n",
    "\n",
    "df_grouped['cluster'] = cluster_model.predict(data_scaled)\n",
    "df_grouped['cluster'].value_counts()\n",
    "df = df_grouped['cluster'].value_counts().rename_axis('Cluster number').reset_index(name='counts')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# final_data - df_grouped\n",
    "# data_new - data_scaled"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[t-SNE] Computing 109 nearest neighbors...\n",
      "[t-SNE] Indexed 110 samples in 0.000s...\n",
      "[t-SNE] Computed neighbors for 110 samples in 0.004s...\n",
      "[t-SNE] Computed conditional probabilities for sample 110 / 110\n",
      "[t-SNE] Mean sigma: 0.000000\n",
      "[t-SNE] KL divergence after 250 iterations with early exaggeration: 45.840363\n",
      "[t-SNE] KL divergence after 300 iterations: 0.125752\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x720 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Applying tSNE to visualise data in 2D\n",
    "\n",
    "from sklearn.manifold import TSNE\n",
    "\n",
    "tsne = TSNE(n_components=2, verbose=1, perplexity=40, n_iter=300, random_state=RANDOM_STATE)\n",
    "tsne_results = tsne.fit_transform(data_scaled)\n",
    "\n",
    "df_grouped['tsne-x-axis'] = tsne_results[:,0]\n",
    "df_grouped['tsne-y-axis'] = tsne_results[:,1]\n",
    "df_grouped\n",
    "\n",
    "tsne_cluster = df_grouped.groupby('cluster').agg({'tsne-x-axis':'mean', 'tsne-y-axis':'mean'}).reset_index()\n",
    "\n",
    "plt.figure(figsize=(16,10))\n",
    "\n",
    "sns.scatterplot(\n",
    "    x=\"tsne-x-axis\", y=\"tsne-y-axis\",\n",
    "    hue=\"cluster\",\n",
    "    palette=sns.color_palette(\"hls\", k),\n",
    "    data=df_grouped,\n",
    "    legend=\"full\",\n",
    "    alpha=1\n",
    ")\n",
    "\n",
    "plt.scatter(x=\"tsne-x-axis\", y=\"tsne-y-axis\", data=tsne_cluster, s=100, c='b')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/vc/7h0bt82n7g916rsm87krcvc00000gn/T/ipykernel_9923/1709323777.py:6: DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.\n",
      "  total_distance = pd.Series()\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(array([ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,\n",
       "         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "         0.,  0.,  0.,  0.,  0.,  2.,  0.,  2.,  0.,  1.,  1., 83.,  2.,\n",
       "         0.,  1.,  1.,  2.,  2.,  1.,  0.,  1.,  3.,  0.,  0.,  0.,  1.,\n",
       "         0.,  0.,  0.,  0.,  1.,  0.,  0.,  1.,  0.,  1.,  0.,  0.,  0.,\n",
       "         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "         0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,\n",
       "         0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  1.]),\n",
       " array([ 3.5642    ,  3.65062286,  3.73704572,  3.82346859,  3.90989145,\n",
       "         3.99631431,  4.08273718,  4.16916004,  4.2555829 ,  4.34200576,\n",
       "         4.42842863,  4.51485149,  4.60127435,  4.68769722,  4.77412008,\n",
       "         4.86054294,  4.9469658 ,  5.03338867,  5.11981153,  5.20623439,\n",
       "         5.29265726,  5.37908012,  5.46550298,  5.55192585,  5.63834871,\n",
       "         5.72477157,  5.81119443,  5.8976173 ,  5.98404016,  6.07046302,\n",
       "         6.15688589,  6.24330875,  6.32973161,  6.41615447,  6.50257734,\n",
       "         6.5890002 ,  6.67542306,  6.76184593,  6.84826879,  6.93469165,\n",
       "         7.02111452,  7.10753738,  7.19396024,  7.2803831 ,  7.36680597,\n",
       "         7.45322883,  7.53965169,  7.62607456,  7.71249742,  7.79892028,\n",
       "         7.88534314,  7.97176601,  8.05818887,  8.14461173,  8.2310346 ,\n",
       "         8.31745746,  8.40388032,  8.49030319,  8.57672605,  8.66314891,\n",
       "         8.74957177,  8.83599464,  8.9224175 ,  9.00884036,  9.09526323,\n",
       "         9.18168609,  9.26810895,  9.35453181,  9.44095468,  9.52737754,\n",
       "         9.6138004 ,  9.70022327,  9.78664613,  9.87306899,  9.95949186,\n",
       "        10.04591472, 10.13233758, 10.21876044, 10.30518331, 10.39160617,\n",
       "        10.47802903, 10.5644519 , 10.65087476, 10.73729762, 10.82372048,\n",
       "        10.91014335, 10.99656621, 11.08298907, 11.16941194, 11.2558348 ,\n",
       "        11.34225766, 11.42868053, 11.51510339, 11.60152625, 11.68794911,\n",
       "        11.77437198, 11.86079484, 11.9472177 , 12.03364057, 12.12006343,\n",
       "        12.20648629]),\n",
       " <BarContainer object of 100 artists>)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plotting histogram of sum_squared_distances of all points from the center of clusters\n",
    "\n",
    "def get_ssd(data, cluster_model, feature_cols):\n",
    "    centers = cluster_model.cluster_centers_\n",
    "    points = np.asarray(data[feature_cols])\n",
    "    total_distance = pd.Series()\n",
    "    for i in range(len(points)):\n",
    "        total_distance.at[i] = get_distance(centers, points, i)\n",
    "    return total_distance  \n",
    "\n",
    "def get_distance(centers, points, i):\n",
    "    distance = 0\n",
    "    for j in range(len(centers)):\n",
    "        d = np.linalg.norm(points[i] - centers[j])\n",
    "        distance += d**2\n",
    "    return distance\n",
    "\n",
    "\n",
    "centers = cluster_model.cluster_centers_\n",
    "points = np.asarray(data_scaled)\n",
    "\n",
    "df_grouped['ssd'] = get_ssd(data_scaled, cluster_model, feature_cols)\n",
    "\n",
    "plt.hist(df_grouped['ssd'], bins=100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='tsne-x-axis', ylabel='tsne-y-axis'>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Setting cutoff to ssd for anomaly\n",
    "\n",
    "cutoff = 8.5\n",
    "df_grouped['anomaly_kmeans'] = (df_grouped['ssd'] >= cutoff).astype(int)\n",
    "# score is calculated between 0 and 1, where score nearer to 1 will indicate an anomaly. This data will be rendenered on kibana.\n",
    "df_grouped['anomaly_kmeans_score'] = (df_grouped['ssd'] - cutoff) / cutoff\n",
    "\n",
    "sns.scatterplot(\n",
    "    x=\"tsne-x-axis\", y=\"tsne-y-axis\",\n",
    "    hue=\"anomaly_kmeans\",\n",
    "    data=df_grouped,\n",
    "    legend=\"full\",\n",
    "    alpha=1\n",
    ")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>total_msgs</th>\n",
       "      <th>WARN_count</th>\n",
       "      <th>INFO_count</th>\n",
       "      <th>DEBUG_count</th>\n",
       "      <th>TRACE_count</th>\n",
       "      <th>ERROR_count</th>\n",
       "      <th>FATAL_count</th>\n",
       "      <th>d73f95b5_count</th>\n",
       "      <th>b23d1fae_count</th>\n",
       "      <th>...</th>\n",
       "      <th>54637d32_count</th>\n",
       "      <th>80abedaf_count</th>\n",
       "      <th>3d9f514d_count</th>\n",
       "      <th>anomaly_manual</th>\n",
       "      <th>cluster</th>\n",
       "      <th>tsne-x-axis</th>\n",
       "      <th>tsne-y-axis</th>\n",
       "      <th>ssd</th>\n",
       "      <th>anomaly_kmeans</th>\n",
       "      <th>anomaly_kmeans_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>2023-03-29 10:55:00</td>\n",
       "      <td>493</td>\n",
       "      <td>0</td>\n",
       "      <td>493</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>55</td>\n",
       "      <td>157</td>\n",
       "      <td>...</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-7.597445</td>\n",
       "      <td>-1.761719</td>\n",
       "      <td>8.902230</td>\n",
       "      <td>1</td>\n",
       "      <td>0.047321</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>2023-03-29 18:10:00</td>\n",
       "      <td>283</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>283</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>283</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.070755</td>\n",
       "      <td>1.919601</td>\n",
       "      <td>12.040659</td>\n",
       "      <td>1</td>\n",
       "      <td>0.416548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>108</th>\n",
       "      <td>2023-03-29 18:15:00</td>\n",
       "      <td>289</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>289</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>289</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.249930</td>\n",
       "      <td>0.778477</td>\n",
       "      <td>12.206486</td>\n",
       "      <td>1</td>\n",
       "      <td>0.436057</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>2023-03-29 18:20:00</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.170478</td>\n",
       "      <td>1.124472</td>\n",
       "      <td>8.712583</td>\n",
       "      <td>1</td>\n",
       "      <td>0.025010</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>4 rows × 25 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Date  total_msgs  WARN_count  INFO_count  DEBUG_count  \\\n",
       "20  2023-03-29 10:55:00         493           0         493            0   \n",
       "107 2023-03-29 18:10:00         283           0           0            0   \n",
       "108 2023-03-29 18:15:00         289           0           0            0   \n",
       "109 2023-03-29 18:20:00          17           0           0            0   \n",
       "\n",
       "     TRACE_count  ERROR_count  FATAL_count  d73f95b5_count  b23d1fae_count  \\\n",
       "20             0            0            0              55             157   \n",
       "107            0          283            0               0               0   \n",
       "108            0          289            0               0               0   \n",
       "109            0           17            0               0               0   \n",
       "\n",
       "     ...  54637d32_count  80abedaf_count  3d9f514d_count  anomaly_manual  \\\n",
       "20   ...               3               1               0               0   \n",
       "107  ...               0               0             283               1   \n",
       "108  ...               0               0             289               1   \n",
       "109  ...               0               0              17               1   \n",
       "\n",
       "     cluster  tsne-x-axis  tsne-y-axis        ssd  anomaly_kmeans  \\\n",
       "20         1    -7.597445    -1.761719   8.902230               1   \n",
       "107        0     0.070755     1.919601  12.040659               1   \n",
       "108        0    -0.249930     0.778477  12.206486               1   \n",
       "109        0     0.170478     1.124472   8.712583               1   \n",
       "\n",
       "     anomaly_kmeans_score  \n",
       "20               0.047321  \n",
       "107              0.416548  \n",
       "108              0.436057  \n",
       "109              0.025010  \n",
       "\n",
       "[4 rows x 25 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Listing anomalous rows according to k-means\n",
    "\n",
    "df_grouped.loc[df_grouped['anomaly_kmeans']==1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>total_msgs</th>\n",
       "      <th>WARN_count</th>\n",
       "      <th>INFO_count</th>\n",
       "      <th>DEBUG_count</th>\n",
       "      <th>TRACE_count</th>\n",
       "      <th>ERROR_count</th>\n",
       "      <th>FATAL_count</th>\n",
       "      <th>d73f95b5_count</th>\n",
       "      <th>b23d1fae_count</th>\n",
       "      <th>...</th>\n",
       "      <th>3d9f514d_count</th>\n",
       "      <th>anomaly_manual</th>\n",
       "      <th>cluster</th>\n",
       "      <th>tsne-x-axis</th>\n",
       "      <th>tsne-y-axis</th>\n",
       "      <th>ssd</th>\n",
       "      <th>anomaly_kmeans</th>\n",
       "      <th>anomaly_kmeans_score</th>\n",
       "      <th>anomaly_isolated</th>\n",
       "      <th>anomaly_score_isof</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2023-03-29 09:15:00</td>\n",
       "      <td>354</td>\n",
       "      <td>0</td>\n",
       "      <td>354</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>41</td>\n",
       "      <td>118</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>-7.316808</td>\n",
       "      <td>-2.566329</td>\n",
       "      <td>4.453302</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.476082</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.029479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>2023-03-29 11:15:00</td>\n",
       "      <td>202</td>\n",
       "      <td>0</td>\n",
       "      <td>202</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>26</td>\n",
       "      <td>70</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>-5.421208</td>\n",
       "      <td>-1.403522</td>\n",
       "      <td>3.564200</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.580682</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.069987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>109</th>\n",
       "      <td>2023-03-29 18:20:00</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>17</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>17</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.170478</td>\n",
       "      <td>1.124472</td>\n",
       "      <td>8.712583</td>\n",
       "      <td>1</td>\n",
       "      <td>0.025010</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.001314</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3 rows × 27 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                   Date  total_msgs  WARN_count  INFO_count  DEBUG_count  \\\n",
       "0   2023-03-29 09:15:00         354           0         354            0   \n",
       "24  2023-03-29 11:15:00         202           0         202            0   \n",
       "109 2023-03-29 18:20:00          17           0           0            0   \n",
       "\n",
       "     TRACE_count  ERROR_count  FATAL_count  d73f95b5_count  b23d1fae_count  \\\n",
       "0              0            0            0              41             118   \n",
       "24             0            0            0              26              70   \n",
       "109            0           17            0               0               0   \n",
       "\n",
       "     ...  3d9f514d_count  anomaly_manual  cluster  tsne-x-axis  tsne-y-axis  \\\n",
       "0    ...               0               0        1    -7.316808    -2.566329   \n",
       "24   ...               0               0        0    -5.421208    -1.403522   \n",
       "109  ...              17               1        0     0.170478     1.124472   \n",
       "\n",
       "          ssd  anomaly_kmeans  anomaly_kmeans_score  anomaly_isolated  \\\n",
       "0    4.453302               0             -0.476082                 1   \n",
       "24   3.564200               0             -0.580682                 1   \n",
       "109  8.712583               1              0.025010                 1   \n",
       "\n",
       "     anomaly_score_isof  \n",
       "0             -0.029479  \n",
       "24            -0.069987  \n",
       "109           -0.001314  \n",
       "\n",
       "[3 rows x 27 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Clustering using Isolation forest algorithm\n",
    "\n",
    "from sklearn.ensemble import IsolationForest\n",
    "\n",
    "outlier_fraction = 0.03\n",
    "\n",
    "model =  IsolationForest(n_jobs=-1, n_estimators=200, max_features=3, random_state=RANDOM_STATE, contamination=outlier_fraction)\n",
    "model.fit(data_scaled)\n",
    "\n",
    "df_grouped['anomaly_isolated'] = pd.Series(model.predict(data_scaled))\n",
    "df_grouped['anomaly_isolated'] = df_grouped['anomaly_isolated'].map( {1: 0, -1: 1} )\n",
    "\n",
    "sns.scatterplot(\n",
    "    x=\"tsne-x-axis\", y=\"tsne-y-axis\",\n",
    "    hue=\"anomaly_isolated\",\n",
    "    data=df_grouped,\n",
    "    legend=\"full\",\n",
    "    alpha=1\n",
    ")\n",
    "\n",
    "# decision_function will calculate score for each data point. \n",
    "#In our context, based on contamination factor set negative values will represent likelihood of anamoly & positive value indicates normal values.\n",
    "df_grouped['anomaly_score_isof'] = model.decision_function(data_scaled)\n",
    "\n",
    "df_grouped.loc[df_grouped['anomaly_isolated']==1]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              K-means  Isolation Forest\n",
      "f1_score     0.333333          0.857143\n",
      "accuracy     0.963636          0.990909\n",
      "sensitivity  0.981308          1.000000\n",
      "specificity  0.333333          0.750000\n",
      "recall       0.333333          1.000000\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from sklearn.metrics import f1_score, accuracy_score, confusion_matrix,ConfusionMatrixDisplay, recall_score\n",
    "\n",
    "def calculate_metrics(y_true, y_pred):\n",
    "    cf = confusion_matrix(y_true, y_pred)\n",
    "    sensitivity = cf[0,0]/(cf[:,0].sum())\n",
    "    specificity = cf[1,1]/(cf[:,1].sum())\n",
    "    f1 = f1_score(y_true, y_pred)\n",
    "    acc = accuracy_score(y_true, y_pred)\n",
    "    recall = recall_score(y_true, y_pred, average='binary')\n",
    "    return {'f1_score': f1, 'accuracy': acc, 'sensitivity': sensitivity, 'specificity': specificity, 'recall': recall}\n",
    "\n",
    "anomaly_manual = df_grouped['anomaly_manual']\n",
    "anomaly_isolated = df_grouped['anomaly_isolated']\n",
    "anomaly_kmeans = df_grouped['anomaly_kmeans']\n",
    "\n",
    "kmeans_metrics = calculate_metrics(anomaly_manual, anomaly_isolated)\n",
    "iso_metrics = calculate_metrics(anomaly_manual, anomaly_kmeans)\n",
    "\n",
    "\n",
    "# Create dataframes from the metrics dictionaries\n",
    "kmeans_df = pd.DataFrame.from_dict(kmeans_metrics, orient='index', columns=['K-means'])\n",
    "iso_df = pd.DataFrame.from_dict(iso_metrics, orient='index', columns=['Isolation Forest'])\n",
    "\n",
    "# Combine the dataframes\n",
    "metrics_df = pd.concat([kmeans_df, iso_df], axis=1)\n",
    "\n",
    "# Print the dataframe\n",
    "print(metrics_df)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_metric_comparison(kmeans_metrics, iso_metrics):\n",
    "    fig, ax = plt.subplots()\n",
    "    ax.bar(kmeans_metrics.keys(), kmeans_metrics.values(), width=-0.4, align='edge', label='K-means')\n",
    "    ax.bar(iso_metrics.keys(), iso_metrics.values(), width=0.4, align='edge', label='Isolation Forest')\n",
    "    ax.set_xlabel('Metrics')\n",
    "    ax.set_ylabel('Scores')\n",
    "    ax.set_title('Model Comparison')\n",
    "    ax.legend()\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "plot_metric_comparison(kmeans_metrics, iso_metrics)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x360 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def plot_confusion_matrices(models, true_labels):\n",
    "    n_models = len(models)\n",
    "    fig, axes = plt.subplots(1, n_models, figsize=(5 * n_models, 5), sharey='row')\n",
    "    \n",
    "    for i, (model_name, y_pred) in enumerate(models.items()):\n",
    "        cm = confusion_matrix(true_labels, y_pred)\n",
    "        disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=['Negative', 'Positive'])\n",
    "        disp.plot(ax=axes[i])\n",
    "        disp.im_.colorbar.remove()\n",
    "        disp.ax_.set_title(f\"Confusion Matrix for {model_name}\")\n",
    "        \n",
    "    plt.subplots_adjust(wspace=0.6, hspace=0.01)\n",
    "   \n",
    "    plt.show()\n",
    "    \n",
    "models = {\n",
    "    'K Means': df_grouped['anomaly_kmeans'],\n",
    "    'Isolated Forest': df_grouped['anomaly_isolated']\n",
    "}\n",
    "\n",
    "true_labels = df_grouped['anomaly_manual']\n",
    "plot_confusion_matrices(models, true_labels)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Saving window results of ML run\n",
    "\n",
    "interval_row = df_grouped.loc[df_grouped['Date'].idxmax()]\n",
    "\n",
    "index_name = 'ml-results'\n",
    "\n",
    "kmeans_metrics['anomaly_score'] = interval_row['anomaly_kmeans_score']\n",
    "isolation_forest_metrics['anomaly_score'] = interval_row['anomaly_score_isof']\n",
    "\n",
    "window_summary = {\n",
    "    'start_time': df_grouped['Date'].max() - datetime.timedelta(minutes = 5),\n",
    "    'end_time': df_grouped['Date'].max(),\n",
    "    'k_means_metrics': kmeans_metrics,\n",
    "    'isolation_forest_metrics': iso_metrics,\n",
    "    'log_level_counts': interval_row[log_level_columns].to_dict(),\n",
    "    'template_counts': interval_row[event_id_columns].to_dict(),    \n",
    "}\n",
    "\n",
    "print(window_summary)\n",
    "\n",
    "es.index(index=index_name, document=window_summary)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
